const questions = ["Какие типы данных существуют в js?", "Разница между двумя и тремя знаков равно?", "Какими способами можно объявить переменную?", "Разница между null and undefined?", "map filter reduce foreach для чего используются?", "Отличия стрелочных функций от обычных?", "Что такое замыкание?", "Шаблонные литералы и для чего они нужны?", "Set и Mep  и для чего они предназначены?", "Как определить какое-то свойства или поля в объекте?", "Способы создания объекта в js?", "Какие значения в js будут являться ложными?", "Что такое промис?", "Как использовать асинк эвайт для асинхронных запросов?", "Для чего нужен оператор spred?", "Как избежать ссылочной зависимости при копировании объекта?", "Как поменять контекст функции?", "Что такое тернарных оператор?", "Что такое деструктуризация?", "Способы работы с асинхронным кодом?", "preventdefault и stop propagation для чего они нужны?", "Как отслеживается и обрабатывать ошибки?", "Что такое дом дерево?", "Что такое прототипное наследование?", "Как получить свойство объекта?", "Свойство display какие значения принимает и как оно работает?", "Какие бывают значения у свойства position?", "Как отцентровать блок по горизонтали и вертикали? ", "Что делает box-sizing?", "Что такое inline стили и какой они имеют приоритет?", "Что такое БЭМ? ", "Разница между margin and padding? ", "vh vw при указании размеров?", "Из чего строиться размер элемента?", "За что отвечает z-index? ", "Приоритеты селекторов?", "Что такое псевдоклассы?", "Что такое псевдоэлементы?", "Свойства flexbox?", "Свойства grid?", "Как увеличить размер элемента при наведении не сдвигая его? ", "Что такое http?", "Из чего состоит http запрос?", "Методы http запросов? ", "Что такое websocet?", "Что такое Rest API?", "Как обрабатывает WEB страницу браузер?", "Что такое @keyframes?", "Как бы вы реализовали кастомный чек бокс?", "Чем отличается border от outline?", "Адаптивная верстка и ее методы?", "Как при нажатии на ссылку открывать окно в новом окне?", "В чем различие между строчными и блочными элементами?", "Что такое семантические элементы и для чего они нужны?", "Свойство overflow, что делает и когда использовать?", "Как убрать маркер у списка?", "Какие бывают значение у background-size?", "!important для чего используется?", "Разница между <script> <script async> <scrypt defer>?", "Что такео медиа запросах под мобильные приложения?", "Как перевести текст в заглавные или строчные буквы?", "Для чего рекомендуется использовать атрибуты data?", "Что такое селектор атрибутов?", "Как изменить стили для кнопок с атрибутом disable?", "Как изменить стили для элемента span, который следует прямо за элементом input?", "С помощью какого селектора можно добавить стиль на каждый элемент на странице?", "Какое свойство позволяет вам спрятать элемент, но сохранить занимаемое им пространство на странице?", "Как сделать тень падающую от блока?", "Как сделать тень падающую от текста?", "Как повернуть блок на 45 градусов?", "Как сделать вращения по осям Х и Y заметными?", "Как сделать анимацию бесконечно повторяющейся?", "Для чего используются препроцессоры?", "Что такое миксины в препроцессорах?", "Что такое bootstrap?", "Что делает setState()?", "Что такое VirtualDOM? ", "Как отрисовать массив элементов в React? ", "Разница между контролируемыми и неконтролируемыми компонентами? ", "Жизненный цикл компонета и его методы?", "Какие основые хуки вы знаете и используете? ", "Что делает хук useState()?", "Что делает хук useEffect()?", "Как отследить демонитрование компонента?", "Что такое stateManager и какой вы используете?", "В каких случая используется локальное состояние, а в каких глобальное?", "Что такое редюсер и какие параметры он принимает?", "Что такое action и как изменить состояние?", " Что такое JSX? ", "Зачем передавать callback в setState?", "Что такое props?", "Для чего используется оператор  && ?", "Для чего используется оператор  || ?", "Что такое распространение события (Event Propogation)?", "Как узнать об использовании метода event.preventDefault()?", "Почему obj.someprop.x приводит к ошибке?", "Что такое цель события или целевой элемент (event.target)?", "Что такое текущая цель события (event.currentTarget)?", "Почему результатом сравнения двух похожих объектов является false?", "Для чего используется оператор  !! ?", "Как записать несколько выражений в одну строку?", "Что такое поднятие (Hoisting)?", "Что такое область видимости (Scope)?", "Как проверить, является ли значение ложным?", "Для чего используется директива «use strict»?", "Что такое прототип объекта?", "Что такое IIFE?", "В чем разница между методами call и apply?", "Что такое функциональное программирование и какие особенности JS позволяют говорить о нем как о функциональном языке программирования?", "Что такое функции высшего порядка (Higher Order Functions)?", "Почему функции в JS называют объектами первого класса (First-class Objects)?", "Что такое объект arguments?", "Как создать объект, не имеющий прототипа?", "Что такое ECMAScript?", "Что такое классы (Classes)?", "Что такое модули (Modules)?", "Что такое функция обратного вызова (Callback Function)?", "Что такое объектная обертка (Wrapper Objects)?", "Что такое NaN? Как проверить, является ли значение NaN?", "Как проверить, является ли значение массивом?", "Что такое AJAX?", "В чем разница между оператором «in» и методом hasOwnProperty?", "Какие приемы работы с асинхронным кодом в JS Вы знаете?", "В чем разница между обычной функцией и функциональным выражением?", "Что такое запоминание или мемоизация (Memoization)?", "Почему typeof null возвращает object? Как проверить, является ли значение null?", "Для чего используется ключевое слово «new»?"]

const answers = ["8 типов данных: string, number, boolean, bigInt, object, null, undefined, simbol.", "2 знака равно сравнивает с привидением типов данных, а 3 знака без приведения (и по типу и по значению)", "переменную можно обьявить с помощью ключевых слов let, const, var", "null используется для присвоения пустого значения, а undefined для проверки была ли переменная назначена.", "forEach - перебирает массив и ничего не возвращает. Map - возвращает новый массив, с примененной функцией к каждому элементу. Filter - возвращает массив элементов для которых применненое услвоие верную true. Reduce - возвращает итоговое накопленное значение. например сумму, произведение и т.д элементов массива.", "Сокращенный синтаксис, отсутсвие this у стрлочных, стрелочные нельзя обьявить с помощью new.", "Замыкание это функция и ее внешние переменные. ", "Для компактной записи выражения, возможность переносить строки.", "Set псевдомассив, для хранения уникальных значений. Map псевдообъект, в качестве ключей можно использовать объекты и simbol.", "key in object", "Можно задать явно, можно с помощью new Function, можно с помощью классов.", "Число 0, пустая строка   , null, undefined и NaN становятся false.", "Это обещание вернуть что-то. Функция которая связывает создающий код с потребляющим.", "Конструкция async await - синтаксический сахар. Перед функцией пишется async, а await используется для обработки промиса.", "В аргументах функции используется чтобы собрать остаточные параметры в массив. Если их написать перед массивом то раскладыают этот массив. Под капотом похож на for ... of.", "Создать полную копию объекта с помощью JSON.parse(JSON.stringify(obj))", "С помощью bind, call, apply.", "Заменять коснтрукцию if…else для простых случаев.", "Сокращенная запись значений массивов/обьектов в переменные.", "callback, промисы и async await", "preventDefault останавливает события браузера по-умолчанию(обновление при перезагрузки), а stopPropagination останавливает погружение события к дочернему элементу.", "С помощью конструкции try … catch … finely(не обязательный). В try помещается код в котором возможно ошибка, если она происходит, выполнение переходит в catch где создается объект Error. Блок finely выполниться в любом случае()", "Это объектная модель HTML документа. Где  в качестве объектов служат HTML-теги.", "У каждого объекта есть свой прототип. Он или равен null, или ссылается на другой объект.", "Если нужно одно то по ключу, если все то Object.values(obj)", "inline, block, float, flex, grid, none", "static, relation, absolute, fixed, stiky", "Проще всего с помощью flex-box", "Задает модель расчета блока. Напр. Border-box указывает что рамка входит в ширину/высоту.", "Это стили которые задаются прямо в HTML. Имеют наивысший приоритет.", "Блок-элемент-модификатор. Разработана Яндексом, для переиспользования элементов.", "margin - внешние отступы, padding - внутренние", "Относительные единицы, за 100% выступает ширина/высота окна браузера.", "Контентная часть, внутренние отступы, рамка, внешние отступы.", "Отвечает за порядок отображения слоев по оси Z.", "Каждый селектор имеет свой вес. Inline-стили, селектор ID, селектор класса, селектор тега.", "Позволяют задавать дополнительные стили уже существующих элементов (hover, active, last-child).", "Позволяют задавать стили несуществующих элементов (after, before).", "Позволяет задавать расположение элементов по одной оси. Оси можно менять.", "Позволяет задавать расположение элементов сразу по двум осям. Х и Y.", "transform: scale()", "Протокол передачи данных по сети. (запрос-ответ)", "Состоит из 3 элементов. Строка запроса, заголовки, тело сообщения.", "GET - получает данные, POST - добавляет данные, PUT - обновляет данные  DELETE - удаляет данные", "Протокол для передачи данных в реальном времени. ", "Это модель взаимодействия клиент-сервис. С помощью разных HTTP методов обращаемся к одному URL.", "Формируется ДОМ дерево из HTML. Загружаются стили. На основании ДОМ дерева и стилей формируется дерево рендеринга. Для каждого элемента рассчитывается положение на странице. Отрисовка в браузере.", "keyframes задает ключевые кадры анимации. Обязательно указывается начальная и конечная позиция.", "Для input задается opacity:0, и сверху на него накладывается label.", "Outline не влияет на блочную модель элемента. У нее нет скругления.", "Это резиновая верстка которая одинаково хорошо отображается на разных устройсвтвах. Размеры задаются в относительных значениях. Используются flex и grid. Используется медиазапросы.", "У ссылки указать атрибут target= _blank ", "Строчные распологаются в одну строку(со всеми пробелами). Блочные занимают всю строку.", "Семантические теги введены в HTML5. Их использование позволяет поисковым роботам лучше индексировать страницу.", "Управляет видимиостью содержимым блока, если оно выходит за border.", "list-style: none;", "contain - полностью вмещают картинку. Cover - подгоняют картинку под блок сохраняя пропорции.", "Используется для повышения приоритета селектора.", "async/defer - позволяют загрузить скрипты асинхронно. Defer - загружает скрипты асинхронно, последовательно, после полной загрузки html страницы.", "Позволяют задать максимальный размер экрана, и указать какие стили использовать для такой ширины.", "text-transform", "Позволяют задать пользовательские атрибуты. Например для создания всплывающих подсказок без использования JS.", "Позволяют точечно стилизовать input по типу.", "С помощью селектора атрибута.", "input + span (с помощью селектора span)", "с помощью универсального селектора *", "есть 2 свойства: opacity:0 или visibility:hidden;", "с помощью свойства box-shadow", "с помощью свойства text-shadow", "С помощью свойства transform: rotate()", "С помощью свойства perspective", "С помощью свойства animation-duration: infinity;", "Добавляет переменные, миксины, авто-префиксы", "миксины - это кусочки кода которые можно потом переиспользовать в других селекторах.", "Графический фреймворк для быстрого создания графических, адаптивных интерфесов.", "Это метод который позволяет изменять состояние компонета. При изменении состояния компонент заново рендерится на странице.", "Это копия DOM-дерева, которую строит реакт. Реакт следит за изменениями в этой копии, и перерисовывает только те элементы у которых есть изменения. Тем самым позволяя нам сосредоточиться не на получении элементов а на логике приложения. ", "С помощью метода map()", "Значение управляемого компонента записывается в state, к которому мы имеем доступ. Неуправляемый реализуется с помощью хука useRef().", "Initialization - подготовка компонетов и состояния по умолчанию, Mounting - монтирование компонентов, Updation - обновляет состояния компонетов, Unmounting - размонтирование(удаление компонета из дом браузера),", "useState(), useEffect(), useMemo(), и т.д", "Управляет состоянием компонента. Возвращает значения: первое - состояние, второе - функцию setState()", "Первым параметром принимает функцию, а вторым массив зависимостей. Если массив пустой - функция отрабатывает один раз во время монтирования компонета. Если в массив передать какие-либо значения, то функция будет отрабатывать каждый раз при изменении этих значений.", "передать в хук useEffect функцию которая возвращает (return) функцию для удаления компонета в момент демонтирования.", "Позволяет отделить логику по работе с данными от самих данных. Позволяет создать локальное хранилище данных к которому имеют доступ все копмоненты напрямую. С React используется 2 менеджера: Redux и MobX.", "Локальное состояние используется только когда оно испольуется только внутри одного компонета, или внутри списка. Остальные состояние рекомендуется выносить в глобальное состояние.", "Это функция которая принимает state и action. Она отслеживает action.type и в зависимости от него изменяет возвращает новый state.", "Это объект полем type и payload. Чтобы изменить состояние, нужно вызвать функцию dispatch и передать ей type и новое значение состояние. Которое потом обработает редюсер.", "Компоненты представляют собой обьекты. JSX это расширения языка, упрощающее восприятие этих обьектов.", "Чтобы можно было изменять состояние сколько угодно раз. Если передать state напрямую(setState(state+1)) изменение произойдет лишь один раз.", "Props это параметр который мы передаем в компонент. Они доступны только для чтения.", "Оператор  &&  (логическое и) находит и возвращает первое ложное значение либо последний операнд, когда все значения истинные.", "Оператор  ||  (логическое или) находит и возвращает первое истинное значение.", "Когда какое-либо событие происходит в элементе DOM, оно на самом деле происходит не только в нем. Событие «распространяется» от объекта Window до вызвавшего его элемента (event.target).", "Для этого мы можем использовать свойство event.defaulPrevented, возвращающее логическое значение, служащее индикатором применения к элементу метода event.preventDefault.", "мы пытается получить доступ к свойству x свойства someprop, которое имеет значение undefined", "Простыми словами, event.target — это элемент, в котором происходит событие, или элемент, вызвавший событие.", "Event.currentTarget — это элемент, к которому прикреплен прослушиватель событий.", "В JS объекты и примитивы сравниваются по-разному. Примитивы сравниваются по значению. Объекты — по ссылке или адресу в памяти, где хранится переменная.", "Оператор  !!  (двойное отрицание) приводит значение справа от него к логическому значению.", "Для этого мы можем использовать оператор  ,  (запятая). Этот оператор «двигается» слева направо и возвращает значение последнего выражения или операнда.", "Поднятие — это термин, описывающий подъем переменной или функции в глобальную или функциональную области видимости. Запомните: поднимаются только функциональные выражения и переменные, объявленные с помощью ключевого слова «var».", "Область видимости — это место, где (или откуда) мы имеем доступ к переменным или функциям. JS имеем три типа областей видимости: глобальная, функциональная и блочная (ES6).", "Следует использовать функцию Boolean или оператор  !!  (двойное отрицание).", "«use strict» — это директива ES5, которая заставляет весь наш код или код отдельной функции выполняться в строгом режиме. Строгий режим вводит некоторые ограничения по написанию кода, тем самым позволяя избегать ошибок на ранних этапах.", "В двух словах, прототип — это план (схема или проект) объекта. Он используется как запасной вариант для свойств и методов, существующих в данном объекте.", "IIFE или Immediately Invoked Function Expression — это функция, которая вызывается или выполняется сразу же после создания или объявления. Это выглядит так: (function(){})().", "Отличие между call и apply состоит в том, как мы передаем аргументы в вызываемой функции. В apply аргументы передаются в виде массива, в call — через запятую.", "Функциональное программирование — это декларативная концепция программирования или образец (паттерн) того, как строятся приложения, как используются функции, содержащие выражения, которые вычисляют значения без изменения аргументов, которые им передаются.", "Функция высшего порядка — это функция, возвращающая другую функцию или принимающая другую функцию в качестве аргумента.", "Функции называют объектами первого класса, потому что они обрабатываются также, как и любое другое значение в JS. Они могут присваиваться переменным, быть свойством объекта (методом), элементом массива, аргументом другой функции, значением, возвращаемым функцией. Единственным отличием функции от любого другого значения в JS является то, что функция может быть выполнена или вызвана.", "Arguments — это коллекция аргументов, передаваемых функции. Это объект, подобный массиву, у него есть свойство length, мы можем получить доступ к определенному значению с помощью arguments[i], но у него отсутствуют методы forEach, reduce, filter и map.", "Это можно сделать с помощью Object.create", "ECMAScript — это спецификация, стандарт скриптовых языков программирования, он является основой JS, поэтому любые изменения ECMAScript отражаются на JS.", "Классы — это относительно новый способ написания функций-конструкторов в JS. Это синтаксический сахар для функций-конструкторов. В основе классов лежат те же прототипы и прототипное наследование", "Модули позволяют объединять (использовать) код из разных файлов и избавляют нас от необходимости держать весь код в одном большом файле.", "Функция обратного вызова — это функция, вызов которой отложен на будущее (происходит при некоторых условиях, например, при наступлении события)", "Примитивы строка, число и boolean имеют свойства и методы, несмотря на то, что они не являются объектами. Причина такого поведения заключается в том, что name временно преобразуется в объект. У каждого примитива, кроме null и undefined, есть объект-обертка. Такими объектами являются String, Number, Boolean, Symbol и BigInt.", "NaN или Not A Number (не число) — это значение, получаемое в результате выполнения числовой операции над нечисловым значением. В JS есть встроенный метод isNaN, позволяющий проверять, является ли значение NaN.", "Для этого следует использовать метод Array.isArray", "AJAX или Asyncronous JavaScript and XML — это набор взаимосвязанных технологий, которые позволяют работать с данными в асинхронном режиме. Это означает, что мы можем отправлять данные на сервер и получать данные с него без перезагрузки веб-страницы", "Отличие состоит в том, что оператор «in» проверяет наличие свойства не только в самом объекте, но и в его прототипах, а метод hasOwnProperty — только в объекте.", "Функции обратного вызова (Callbacks). Промисы (Promises). Async/await.", "Функция можно вызывать выше в коде, до ее написания, а функциональное выражение только после обьявления.", "Мемоизация — это прием создания функции, способной запоминать ранее вычисленные результаты или значения. Преимущество мемоизации заключается в том, что мы избегаем повторного выполнения функции с одинаковыми аргументами.", "Для проверки, является ли значение null можно использовать оператор строгого равенства (===)", "Ключевое слово «new» используется в функциях-конструкторах для создания нового объекта (нового экземпляра класса)"]